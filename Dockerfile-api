FROM richarvey/nginx-php-fpm:1.10.3

ARG APP_ENV=prod
ARG TZ="Europe/Paris"
ARG BUILD_VERSION="unknown"

ENV APP_ENV=${APP_ENV}
ENV BUILD_VERSION=${BUILD_VERSION}

RUN set -xe \
  && echo $TZ > /etc/TZ \
  && ln -sf /usr/share/zoneinfo/$TZ /etc/localtime

RUN pecl channel-update pecl.php.net

RUN apk update && apk upgrade \
  && apk add --no-cache \
        autoconf \
        bash \
        bzip2-dev \
        ca-certificates \
        curl \
        cyrus-sasl-dev \
        g++ \
        git \
        icu-dev \
        libcurl \
        libmcrypt-dev \
        libpng-dev \
        libxslt-dev \
        libzip-dev \
        linux-headers \
        make \
        openssh-client \
        openssl-dev \
        rabbitmq-c-dev \
        postgresql-dev \
        tzdata \
        wget \
        yaml-dev \
        zlib-dev \
  && rm -rf /var/cache/apk/*

#### PHP extension ####
RUN pecl install \
      amqp-1.11.0beta \
      apcu \
      mongodb \
  && mkdir -p /usr/local/etc/php/conf.d \
  && docker-php-ext-enable apcu \
  && docker-php-ext-enable amqp \
  && docker-php-ext-enable mongodb \
  && docker-php-ext-install \
      bcmath \
      intl \
      gd \
      opcache \
      pdo \
      pdo_mysql \
      pdo_pgsql \
      sockets \
      xsl \
      zip

#### Xdebug ####
RUN apk add php7-xdebug --repository http://dl-3.alpinelinux.org/alpine/edge/testing/

#### KAFKA SUPPORT #####
ENV LIBRDKAFKA_VERSION 1.6.1
ENV EXT_RDKAFKA_VERSION 5.0.0

RUN git clone --depth 1 --branch v$LIBRDKAFKA_VERSION https://github.com/edenhill/librdkafka.git \
  && cd librdkafka \
  && ./configure \
  && make \
  && make install

RUN pecl channel-update pecl.php.net \
  && pecl install rdkafka-$EXT_RDKAFKA_VERSION \
  && docker-php-ext-enable rdkafka \
  && rm -rf /librdkafka

#### Composer #####
RUN wget https://getcomposer.org/installer -O composer-setup.php \
  && php ./composer-setup.php  --install-dir=/usr/local/bin \
  && ln -s /usr/local/bin/composer.phar /usr/local/bin/composer

COPY . /var/www/html

WORKDIR /var/www/html

RUN echo "{\"version\"=\"$BUILD_VERSION\",\"date\"=\"`date -Is`\"}" > /var/www/html/public/version.json

ENV SKIP_CHOWN=true
ENV SKIP_COMPOSER=true

RUN cd /var/www/html \
    && composer install -n \
    && composer clearcache -n